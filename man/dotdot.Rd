% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metareactive.R
\name{..}
\alias{..}
\title{Unquoting subexpressions}
\usage{
..(expr)
}
\arguments{
\item{expr}{A single code expression. Required.}
}
\description{
In shinymeta, the \code{..()} function is used to \emph{annotate} parts of the code
that goes into \code{metaExpr} (or its higher-level friends \code{metaReactive},
\code{metaObserve}, and \code{metaRender}). These \code{meta-} functions should find the
\code{..()} calls, and replace them with... something else (see Details). In
practice, all reads of reactive values or metareactive expressions should be
wrapped in \code{..()}, as well as any expressions that should be unquoted at code
generation time.
}
\details{
\strong{When the containing meta-object is invoked normally (execution mode), the
code is rewritten to simply strip the \code{..()} call.} For example,
\code{..(dataset())} becomes \code{dataset()}, and \code{..(format(Sys.Date()))} becomes
\code{format(Sys.Date())}.

\strong{When the containing meta-object is asked for its code (meta mode), as in
\code{\link[=expandChain]{expandChain()}}, the argument to \code{..()} is unquoted}. Reads of
\code{metaReactive} and \code{metaReactive2} are turned into variable names (i.e.
\code{..(dataset())} becomes \code{dataset} or similar) and other code is replaced with
its results (\code{..(format(Sys.Date()))} becomes e.g. \code{"2019-08-06"}).

Note that the \code{..} function itself has no usable implementation; the \code{..} is
simply intended as a marker that \code{metaExpr} (and \code{metaReactive},
\code{metaObserve}, and \code{metaRender}) should look for as it crawls over user code.
The \code{..()} function should never actually be executed in properly written
shinymeta apps.

If you're seeing the error "It looks like you're attempting to execute the
'..()' function", it probably means you've done one of several things:
\enumerate{
\item You've called \code{..()} from outside of \code{metaExpr}, \code{metaReactive},
\code{metaObserve}, or \code{metaRender}. Calling from elsewhere is not allowed--this
includes the non-\code{metaExpr} portions of \code{metaReactive2}, \code{metaObserve2}, and
\code{metaRender2}.
\item You've inserted a \code{browser()} prompt into a \code{metaExpr} or similar, and
from inside the \code{Browse>} prompt, you've called \code{..()}. This is also not
allowed, because the purpose of \code{..()} is to be searched-and-replaced away
\emph{before} \code{metaExpr} begins executing the code. In a \code{Browse>} prompt, the
search-and-replace is in the past.
\item Crafted a bit of code that use \code{..()} in a way that was too clever (or
too, well, \emph{opposite of clever}) for shinymeta to understand. For example,
\code{lapply(1:5, ..)} is syntactically valid R code, but it's nonsense from a
shinymeta perspective.
}
}
\seealso{
\code{\link[=metaExpr]{metaExpr()}}, \code{\link[=metaReactive]{metaReactive()}}, \code{\link[=metaObserve]{metaObserve()}}, \code{\link[=metaRender]{metaRender()}}
}
\keyword{internal}
